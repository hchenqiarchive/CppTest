#include <iostream>
#include <tuple>
#include <utility> // for std::index_sequence

template <typename... SrcArgs, typename... DestArgs, std::size_t... Is>
void _move_assign_tuple_impl(std::tuple<SrcArgs...>&& source, std::tuple<DestArgs...>& destination, std::index_sequence<Is...>) {
    ((std::get<Is>(destination) = std::move(std::get<Is>(source))), ...);
}

template <typename... SrcArgs, typename... DestArgs>
void move_assign_tuple(std::tuple<SrcArgs...>&& source, std::tuple<DestArgs...>& destination) {
    static_assert(sizeof...(SrcArgs) == sizeof...(DestArgs), "Tuples must have the same size");
    _move_assign_tuple_impl(std::move(source), destination, std::index_sequence_for<SrcArgs...>{});
}

int main() {
    // Source tuple with different types
    std::tuple<int, double, const char*> source(42, 3.14, "Hello");

    // Destination tuple with compatible but different types
    std::tuple<long, float, std::string> destination;

    // Assign one tuple to another
    move_assign_tuple(std::move(source), destination);

    // Print the destination tuple to verify
    std::cout << "Destination tuple: "
        << std::get<0>(destination) << ", "
        << std::get<1>(destination) << ", "
        << std::get<2>(destination) << std::endl;

    return 0;
}
